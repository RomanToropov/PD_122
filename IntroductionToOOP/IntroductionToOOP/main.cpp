//IntroductionToOOP
#include<iostream>
using namespace std;

class Point	//Создавая структуру или класс мы создаем новый тип данных
{
	double x;
	double y;
public:
	double get_x()const
	{
		return x;
	}
	double get_y()const
	{
		return y;
	}
	void set_x(double x)
	{
		this->x = x;
	}
	void set_y(double y)
	{
		this->y = y;
	}
};

//#define STRUCT_POINT

void main()
{
	setlocale(LC_ALL, "");
#ifdef STRUCT_POINT
	//type name;	//синтаксис объявления переменной
	int a;	//Объявление переменной 'a' типа 'int'
	Point A;//Объявление переменной 'A' типа 'Point'
			//Создание объекта 'A' структуры 'Point'
			//Объявление объекта 'A' структуры 'Point'
			//Создание экземпляра 'A' структуры 'Point'
	A.x = 2;
	A.y = 3;
	cout << A.x << "\t" << A.y << endl;

	Point* pA = &A;	//Создаем (объявляем) Указатель на Point
	cout << pA->x << "\t" << pA->y << endl;
#endif // STRUCT_POINT

	Point A;
	A.set_x(2);
	A.set_y(3);
	cout << A.get_x() << "\t" << A.get_y() << endl;
}

/*
------------------------------------------------------------------
.  - Оператор пямого доступа	 (Point operator)
-> - Оператор косвенного доступа (Arrow operator)
------------------------------------------------------------------
*/

/*
------------------------------------------------------------------
1. Инкапсуляция - Encapsulation;
	Модификаторы доступа:
		private:	закрытые поля, доступны только внутри класса/структуры
		public:		открытые поля, доступны из любого места программы
		protected:	защищенные поля, доступны изнутри класса, и изнутри дочерних классов.
					Этот модификатор доступа используется только при наследовании.
	get/set-методы:
	get(взять, получить) - открывают доступ на чтение
	set(задать, установить) - открывают доступ к закрытым переменным на запись.
	set-методы так же обеспечивают фильтрацию данных
2. Наследование - Inheritance;
3. Полиморфизм  - Polymorphism;
------------------------------------------------------------------
*/