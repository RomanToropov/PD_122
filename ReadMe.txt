https://github.com/okovtun/PD_122.git
https://www.youtube.com/watch?v=MD-QantEx1Y&list=PLeqyOOqxeiIONON3ba77iHmgVPH-p3XG1

///////////////////////////////////////////////////////////////////
////////////					STL						////////////
///////////////////////////////////////////////////////////////////

http://cplusplus.com/reference/unordered_map/unordered_map/

Реализовать базу данных ГАИ по штрафным квитанциям с помощью бинарного дерева. Ключом будет служить
номер автомашины, значением узла — список правонарушений. Если квитанция добавляется в первый раз,
то в дереве появляется новый узел, а в списке данные по правонарушению; если нет, 
то данные заносятся в существующий список. 
Необходимо также реализовать следующие операции:
	■ Полная распечатка базы данных (по номерам машин и списку правонарушений, числящихся за ними);
	■ Распечатка данных по заданному номеру;
	■ Распечатка данных по диапазону номеров;
	■ Сохраняйте и загружайте информацию из файла.

http://cplusplus.com/reference/stl/
http://cplusplus.com/reference/vector/vector/

В односвязный и двусвязный списки добавить методы:
	void unique();	//Удаляет повторяющиеся значения
	void reverse();	//Изменяет порядок следования элементов на противоположный

TODO:
1. Добавить в вектор значение по заданному индексу. Индекс и значение вводятся с клавиатуры;
2. Удалить из вектора значение по заданному индексу. Индекс вводится с клавиатуры;

////////////////////////////////////////////////////////////////////////////////////
////////////					DATA CONTAINERS							////////////
////////////////////////////////////////////////////////////////////////////////////

TODO:
1. Вызвать функции insert() и print() без передачи в них корня дерева;	DONE
2. В класс Tree добавить методы:
	int minValue()const;	//возвращает минимальное значение в дереве	DONE
	int maxValue()const;	//возвращает максимальное значение в дереве	DONE
	int count()const;		//возвращает количество элементов в дереве	DONE
	int sum()const;			//сумма элементов дерева					DONE
	double avg()const;		//среднее арифметическое элементов дерева	DONE
	void clear();			//очищает дерево, т.е., удаляет из него все элементы	DONE
	void erase();			//удаляет указанное значение из дерева
	int depth();			//Определяет глубину дерева					DONE

	CopyMethods;			DONE
	MoveMethods;

3. Перегрузить метод print() таким образом, чтобы он выводил все элементы на заданной глубине;

////////////////////////////////////////////////////////////////////////////////////

DONE:
Реализовать класс List, описывающий двусвязный список.

DONE:
1. Реализовать метод erase(), который удаляет значение по индексу;
2. Оптимизировать код, в методах добавления элементов;	DONE
3. Написать оператор +, который конкатенирует списки;
4. Написать MoveMethods: http://cplusplus.com/doc/tutorial/classes2/;

////////////////////////////////////////////////////////////////////////////////////
////////////				INHERITANCE & POLYMORPHISM					////////////
////////////////////////////////////////////////////////////////////////////////////

TODO:
1. Нарисовать квадрат и прямоуглоьник используя GDI;
2. Вынести в базовый класс начальные координаты фигуры и толщину линии;		DONE
3. Написать класс IsoscelesTriangle, описывающий равнобедренный треугольник;
4. Написать класс RightTriangle, описывающий прямоугольный треугольник;
5. Сгенерировать произвольный набор произвольных фигур;

DONE:
В иерархию геометрических фигур добавить круг, и проверить его работу.

DONE:
Необходимо реализовать иерархию геометрических фигур: квадрат, прямоугольник, треугольник, круг.
Для каждой фигуры необходимо получать ее первичные свойства, например длина стороны, и вторичные свойства:
площадь и периметр. Также каждую фигуру нужно нарисовать.

TODO:
1. Вывод конструкторов и деструкторов поместить в секцию DEBUG;
2. Используя функции find(), find_first_not_of() и erase(), проверить каждую загружаемую из файла строку на наличие 
лишних пробелов и удалить эти пробелы, если они есть.
http://cplusplus.com/reference/string/string/

DONE:
0. Почитать в Интернете про формат файлов *.CSV - Comma Separated Values;
1. При выводе в файл каждое свойство должно быть отделено от предыдущего разделителем.
2. Обеспечить загрузку объектов из файла;

DONE:
Создать ветку master->AcademySeparation, и в этой ветке вынести все классы в отдельные файлы.

DONE:
Создать ветку master->FractionSeparation и в этой ветке вынести класс Fraction в отдельные файлы.

DONE:
Реализовать класс String, описывающий строку.
Варианты создания объектов:
1. String str;	//Создается пустая строка размером 80 Байт
2. String str1 = "Hello", str2 = "World";
3. String str3 = str1 + str2;
/////////////////////////////////////////////////////////
4. str1 += str2;	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
/////////////////////////////////////////////////////////

DONE:
Для класса Fraction:
1. Добавить конструктор копирования и оператор присваивания;
2. Перегрузить недостающие арифметические операторы: +, -;	DONE
3. Перегрузить составные присваивания: +=,-=, *=, /=;		DONE
4. Перегрузить инкремент и декремент (++/--);				DONE
5. Операторы ввода/вывода						DONE
6. Операторы сравнения: ==, !=, >, <, >=, <=	DONE
7. Проверочный код должен заработать:
		Fraction A = 2.75;
		cout << A << endl;

DONE:
В отдельном проекте реализовать класса Fraction, описывающий простую дробь.
В классе должны быть все необходимые методы, а так же над дробями должны выполняться
все арифметические и прочие операции.

DONE:
1. Выучить теорию!!!!!!!!!!!!!!!!!!!!!!!!!!!
2. Написать метод ??? distance(???), который возвращает расстояние до указанной точки;
3. Написать функцию ??? distance(???), которая возвращает расстояние между двумя точками;